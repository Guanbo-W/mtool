// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// proximalGraph
arma::mat proximalGraph(arma::colvec U, arma::mat grp, arma::mat grpV, arma::colvec etaG, std::string regul, double lam1, double lam2, double lam3, int num_threads, bool intercept, bool resetflow, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose);
RcppExport SEXP _mtool_proximalGraph(SEXP USEXP, SEXP grpSEXP, SEXP grpVSEXP, SEXP etaGSEXP, SEXP regulSEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP num_threadsSEXP, SEXP interceptSEXP, SEXP resetflowSEXP, SEXP verboseSEXP, SEXP posSEXP, SEXP cleverSEXP, SEXP evalSEXP, SEXP size_groupSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grpV(grpVSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type etaG(etaGSEXP);
    Rcpp::traits::input_parameter< std::string >::type regul(regulSEXP);
    Rcpp::traits::input_parameter< double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type resetflow(resetflowSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type pos(posSEXP);
    Rcpp::traits::input_parameter< bool >::type clever(cleverSEXP);
    Rcpp::traits::input_parameter< bool >::type eval(evalSEXP);
    Rcpp::traits::input_parameter< int >::type size_group(size_groupSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(proximalGraph(U, grp, grpV, etaG, regul, lam1, lam2, lam3, num_threads, intercept, resetflow, verbose, pos, clever, eval, size_group, transpose));
    return rcpp_result_gen;
END_RCPP
}
// lik
double lik(arma::colvec betas, arma::mat covariates, arma::colvec Id, arma::uvec Event, arma::colvec Fup, arma::colvec Start, arma::uvec Stop);
RcppExport SEXP _mtool_lik(SEXP betasSEXP, SEXP covariatesSEXP, SEXP IdSEXP, SEXP EventSEXP, SEXP FupSEXP, SEXP StartSEXP, SEXP StopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Id(IdSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Event(EventSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Fup(FupSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Start(StartSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Stop(StopSEXP);
    rcpp_result_gen = Rcpp::wrap(lik(betas, covariates, Id, Event, Fup, Start, Stop));
    return rcpp_result_gen;
END_RCPP
}
// der_lik
arma::colvec der_lik(arma::colvec betas, arma::mat covariates, arma::colvec Id, arma::uvec Event, arma::colvec Fup, arma::colvec Start, arma::uvec Stop);
RcppExport SEXP _mtool_der_lik(SEXP betasSEXP, SEXP covariatesSEXP, SEXP IdSEXP, SEXP EventSEXP, SEXP FupSEXP, SEXP StartSEXP, SEXP StopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Id(IdSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Event(EventSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Fup(FupSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Start(StartSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Stop(StopSEXP);
    rcpp_result_gen = Rcpp::wrap(der_lik(betas, covariates, Id, Event, Fup, Start, Stop));
    return rcpp_result_gen;
END_RCPP
}
// SurvGraphSelect
arma::colvec SurvGraphSelect(arma::mat covariates, arma::colvec Id, arma::uvec Event, arma::colvec Fup, arma::colvec Start, arma::uvec Stop, arma::mat grp, arma::mat grpV, arma::colvec etaG, std::string regul, arma::colvec betas, double t, double alpha, double epsilon, double lam1, double lam2, double lam3, int num_threads, bool intercept, bool resetflow, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose);
RcppExport SEXP _mtool_SurvGraphSelect(SEXP covariatesSEXP, SEXP IdSEXP, SEXP EventSEXP, SEXP FupSEXP, SEXP StartSEXP, SEXP StopSEXP, SEXP grpSEXP, SEXP grpVSEXP, SEXP etaGSEXP, SEXP regulSEXP, SEXP betasSEXP, SEXP tSEXP, SEXP alphaSEXP, SEXP epsilonSEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP num_threadsSEXP, SEXP interceptSEXP, SEXP resetflowSEXP, SEXP verboseSEXP, SEXP posSEXP, SEXP cleverSEXP, SEXP evalSEXP, SEXP size_groupSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Id(IdSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Event(EventSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Fup(FupSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Start(StartSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Stop(StopSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grp(grpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grpV(grpVSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type etaG(etaGSEXP);
    Rcpp::traits::input_parameter< std::string >::type regul(regulSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type resetflow(resetflowSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type pos(posSEXP);
    Rcpp::traits::input_parameter< bool >::type clever(cleverSEXP);
    Rcpp::traits::input_parameter< bool >::type eval(evalSEXP);
    Rcpp::traits::input_parameter< int >::type size_group(size_groupSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(SurvGraphSelect(covariates, Id, Event, Fup, Start, Stop, grp, grpV, etaG, regul, betas, t, alpha, epsilon, lam1, lam2, lam3, num_threads, intercept, resetflow, verbose, pos, clever, eval, size_group, transpose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mtool_proximalGraph", (DL_FUNC) &_mtool_proximalGraph, 17},
    {"_mtool_lik", (DL_FUNC) &_mtool_lik, 7},
    {"_mtool_der_lik", (DL_FUNC) &_mtool_der_lik, 7},
    {"_mtool_SurvGraphSelect", (DL_FUNC) &_mtool_SurvGraphSelect, 26},
    {NULL, NULL, 0}
};

RcppExport void R_init_mtool(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
